/**
 * 45、判断是否符合 USD 格式
 * 给定字符串 str，检查其是否符合美元书写格式
 * 1、以$开始
 * 2、整数部分，从个位起，满 3 个数字用，分隔
 * 3、如果为小数，则小数部分长度为 2
 * 4、正确的格式如: $1,023,032.03 或者 S2.03，错误的格式如: S3,43212.12 或者 $34344.3
 * 输入
 * '$20,933,209.93'
 * 输出
 * true
 */

function isUSD(str) {
  return /^\$\d{1,3}(,\d{3})*(\.\d{2})?$/.test(str);
}

console.log(isUSD("$20,933,209.93"));

// ? 匹配前面一个表达式0次或者1次。等价于 {0,1}。
// 例如，/e?le?/ 匹配 'angel' 中的 'el'，和 'angle' 中的 'le'
// (注意第二个 ? 前面的匹配表达式是 e 而不是 le) 以及 'oslo' 中的'l'。

// 如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪的（匹配尽量少的字符），和缺省
// 使用的贪婪模式（匹配尽可能多的字符）正好相反。
// 例如，对 "123abc" 应用 /\d+/ 将会返回 "123"，如果使用 /\d+?/,那么就只会匹配到 "1"。
// 还可以运用于向前断言 正向肯定查找x(?=y) 和 正向否定查找x(?!y) 。

// * 匹配前一个表达式0次或多次。等价于 {0,}。
// 例如，/bo*/会匹配 "A ghost boooooed" 中的 'booooo' 和 "A bird warbled" 中的 'b',
// 但是在 "A goat grunted" 中将不会匹配任何东西。

// . (小数点)匹配  除了换行符（\n）之外的任何单个字符。
// 例如, /.n/将会匹配"nay, an apple is on the tree"中的'an'和'on', 但是不会匹配 'nay'。
